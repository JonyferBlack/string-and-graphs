#include <vector>

#include "string_exact_match.h"

namespace string_exact_match_exersises {

using std::string;
using std::vector;

/*
 * Returns true when patter first occured, false if not
 *
 * Worst case is Omega(n * m) for n is pattern length and m is text length
 *
 */
bool string_exact_match_naive(const string& text, const string& pattern) {
	int n = pattern.length(), m = text.length();
	for (auto i = 0; i + n < m; ++i) {
		int j = 0;
		while (text[i + j] == pattern[j]) {
			j++;
			if (j == n)
				return true;
		}
	}
	return false;
}

/*
 * String preproccesing algorithm
 */
void z_algorithm_naive(const string& s) {
	int n = s.length();
	vector<int> Z(s.length());
	for (auto i = 1; i < n; ++i){
		int counter = 0;
		while (s[counter] == s[counter + i]){

		}
	}
}

/*
 * String preproccesing algorithm
 */
void z_algorithm(const string& s) {
	vector<int> Z(s.length());
	int k, right = 1, left = 0;
	for (auto i = 1; i < s.length(); ++i) {
		k = i;
		if (k > right) {
			int counter = 0;
			while (s[counter] == s[counter + k]) {
				counter++;
			}
			right = k + counter - 1;
			left = k;

			Z[i] = left - right;
		} else {
			int k_ = k - l + 1;

		}
	}
}

}
