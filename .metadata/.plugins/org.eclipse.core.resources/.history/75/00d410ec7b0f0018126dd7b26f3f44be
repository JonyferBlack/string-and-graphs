#include <iostream>
#include <vector>
#include <algorithm>

using std::vector;

int max_index(const vector<int>& list){
	int result = 0;
	for (auto i = 0; i < list.size(); i++){
		if (list[result] < list[i])
			result = i;
	}
	return result;
}

double get_optimal_value(int capacity, vector<int> weights,
		vector<int> values) {
	// write your code here

	int size = weights.size();
	double value = 0.0;
	vector<double> value_per_weight(size);
	for (auto i = 0; i < size; i++) {
		value_per_weight[i] = weights[i] / values[i];
	}

	double current_loot;
	while (capacity - current_loot > 0){

	}

	return value;
}

int main() {
	int n;
	int capacity;
	std::cin >> n >> capacity;
	vector<int> values(n);
	vector<int> weights(n);
	for (int i = 0; i < n; i++) {
		std::cin >> values[i] >> weights[i];
	}

	double optimal_value = get_optimal_value(capacity, weights, values);

	std::cout.precision(10);
	std::cout << optimal_value << std::endl;
	return 0;
}
