#include <iostream>
#include <vector>

using namespace std;

long long get_fibonacci_huge_naive(long long n, long long m) {
    if (n <= 1)
        return n;

    long long previous = 0;
    long long current  = 1;

    for (long long i = 0; i < n - 1; ++i) {
        long long tmp_previous = previous;
        previous = current;
        current = tmp_previous + current;
    }

    return current % m;
}

int fibonacci_fast(const int& n) {
    if (n <= 1)
        return n;

	vector<int> fib_seq;
	fib_seq.push_back(1);
    fib_seq.push_back(1);
    for (auto i = 2; i < n; i++){
    	fib_seq.push_back(fib_seq[i-1] + fib_seq[i-2]);
    }

    return fib_seq.back();
}

int getCountsOfDigits(int n) {
	if (n < 100000) {
		if (n < 100) {
			if (n < 10) {
				return 1;
			} else {
				return 2;
			}
		} else {
			if (n < 1000) {
				return 3;
			} else {
				if (n < 10000) {
					return 4;
				} else {
					return 5;
				}
			}
		}
	} else {
		if (n < 10000000) {
			if (n < 1000000) {
				return 6;
			} else {
				return 7;
			}
		} else {
			if (n < 100000000) {
				return 8;
			} else {
				if (n < 1000000000) {
					return 9;
				} else {
					return 10;
				}
			}
		}
	}
}

long long get_fibonacci_huge_fast(const long long& n, const long long& m) {
    if (n <= 1){
        return n;
    }

    vector<int> result;

	for (auto i = 0; i < getCountsOfDigits(m); i++) {
		bool even = m % 2;
		int k = n / 2;
		if (!even)
			k = (n - 1) / 2;

		int mod = n % k;
		int result = fibonacci_fast(mod);
		result % m;
	}
}

int main() {
    long long n, m;
    std::cin >> n >> m;
    std::cout << get_fibonacci_huge_naive(n, m) << endl;
    std::cout << get_fibonacci_huge_fast(n, m) << '\n';
    return 0;
}
