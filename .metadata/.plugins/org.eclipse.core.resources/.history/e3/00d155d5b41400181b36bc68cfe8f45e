#include "string_exact_match.h"

namespace string_exact_match_exersises {

using std::string;
using std::vector;

/*
 * Returns true when patter first occured, false if not
 *
 * Worst case is the Omega(n * m) where n is a pattern length and m is a text length
 *
 */
bool string_exact_match_naive(const string& text, const string& pattern) {
	int n = pattern.length(), m = text.length();
	for (auto i = 0; i + n < m; ++i) {
		int j = 0;
		while (text[i + j] == pattern[j]) {
			j++;
			if (j == n)
				return true;
		}
	}
	return false;
}

/* Z-algorithm naive
 *
 * Quadratic time pattern searching preproccesing algorithm
 *
 * worst case is the Omega(n ^ 2) where n is a string length
 */
vector<int> z_algorithm_naive(const string& s) {
	int n = s.length();
	vector<int> Z(s.length());
	for (auto i = 1; i < n; ++i) {
		int counter = 0;
		while (s[counter] == s[counter + i]) {
			++counter;
			if (counter + i == n)
				break;
		}
		Z[i] = counter;
	}

	return Z;
}

/* Z-algorithm
 *
 * Linear time pattern searching Algorithm
 *
 * worst case is the O(n) where n is a string length
 */
vector<int> z_algorithm(const string& s) {
	int n = s.length();

	vector<int> Z(n);
	int k, right = 0, left = 0;

	for (int i = 1; i < n; ++i) {
		if (i > right) {
			left = right = i;
			while (right < n && s[right - left] == s[right]) {
				right++;
			}
			Z[i] = right - left;
			--right;
		} else {
			k = i - left;
			if (Z[k] < right - i + 1)
				Z[i] = Z[k];
			else {
				left = i;
				while (right < n && s[right - left] == s[right]) {
					right++;
				}
				Z[i] = right - left;
				--right;
			}
		}
	}

	return Z;
}

}
